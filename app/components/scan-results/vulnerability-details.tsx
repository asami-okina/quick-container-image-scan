import * as React from "react";
import { useState } from "react";
import { Badge } from "@/app/components/ui/badge";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/app/components/ui/tabs";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/app/components/ui/table";
import { Vulnerability } from "@/lib/schemas/scan";

type VulnerabilityDetailsProps = {
  vulnerabilitiesByTarget: Record<string, Vulnerability[]>;
};

export function VulnerabilityDetails({
  vulnerabilitiesByTarget,
}: VulnerabilityDetailsProps) {
  const [expandedVulnerability, setExpandedVulnerability] = useState<
    string | null
  >(null);

  const getSeverityColor = (severity: string) => {
    switch (severity.toUpperCase()) {
      case "CRITICAL":
        return "bg-gradient-to-r from-red-400 to-red-500 hover:from-red-500 hover:to-red-600";
      case "HIGH":
        return "bg-gradient-to-r from-orange-400 to-orange-500 hover:from-orange-500 hover:to-orange-600";
      case "MEDIUM":
        return "bg-gradient-to-r from-yellow-400 to-yellow-500 hover:from-yellow-500 hover:to-yellow-600";
      case "LOW":
        return "bg-gradient-to-r from-pink-400 to-pink-500 hover:from-pink-500 hover:to-pink-600";
      default:
        return "bg-gradient-to-r from-gray-400 to-gray-500 hover:from-gray-500 hover:to-gray-600";
    }
  };

  return (
    <Tabs defaultValue={Object.keys(vulnerabilitiesByTarget)[0]}>
      <TabsList>
        {Object.entries(vulnerabilitiesByTarget).map(([target, vulns]) => (
          <TabsTrigger key={target} value={target}>
            {target} ({vulns.length})
          </TabsTrigger>
        ))}
      </TabsList>

      {Object.entries(vulnerabilitiesByTarget).map(([target, vulns]) => (
        <TabsContent key={target} value={target}>
          <div className="rounded-lg overflow-hidden bg-white/30 backdrop-blur-sm shadow-md">
            <Table>
              <TableHeader className="bg-black/5">
                <TableRow>
                  <TableHead className="font-montserrat">Library</TableHead>
                  <TableHead className="font-montserrat">
                    Vulnerability
                  </TableHead>
                  <TableHead className="font-montserrat">Severity</TableHead>
                  <TableHead className="font-montserrat">Status</TableHead>
                  <TableHead className="font-montserrat">
                    Installed Version
                  </TableHead>
                  <TableHead className="font-montserrat">
                    Fixed Version
                  </TableHead>
                  <TableHead className="font-montserrat">Title</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {vulns.map((vuln: Vulnerability) => (
                  <React.Fragment
                    key={`${vuln.VulnerabilityID}-${vuln.PkgName}-${vuln.InstalledVersion}`}
                  >
                    <TableRow
                      className="hover:bg-white/30 cursor-pointer"
                      onClick={() =>
                        setExpandedVulnerability(
                          expandedVulnerability ===
                            `${vuln.VulnerabilityID}-${vuln.PkgName}-${vuln.InstalledVersion}`
                            ? null
                            : `${vuln.VulnerabilityID}-${vuln.PkgName}-${vuln.InstalledVersion}`
                        )
                      }
                    >
                      <TableCell>{vuln.PkgName}</TableCell>
                      <TableCell className="font-mono">
                        {vuln.VulnerabilityID}
                      </TableCell>
                      <TableCell>
                        <Badge className={getSeverityColor(vuln.Severity)}>
                          {vuln.Severity}
                        </Badge>
                      </TableCell>
                      <TableCell>{vuln.Status}</TableCell>
                      <TableCell>{vuln.InstalledVersion}</TableCell>
                      <TableCell>{vuln.FixedVersion || "—"}</TableCell>
                      <TableCell>
                        <div className="flex flex-col">
                          <span>{vuln.Title || "—"}</span>
                          {vuln.PrimaryURL && (
                            <a
                              href={vuln.PrimaryURL}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-sm text-blue-600 hover:underline"
                            >
                              {vuln.PrimaryURL}
                            </a>
                          )}
                        </div>
                      </TableCell>
                    </TableRow>
                    {expandedVulnerability ===
                      `${vuln.VulnerabilityID}-${vuln.PkgName}-${vuln.InstalledVersion}` && (
                      <TableRow
                        key={`${vuln.VulnerabilityID}-${vuln.PkgName}-${vuln.InstalledVersion}-details`}
                        className="bg-white/20"
                      >
                        <TableCell colSpan={7} className="p-4">
                          <div className="space-y-2">
                            <h4 className="font-medium">
                              {vuln.Title || "No title available"}
                            </h4>
                            <p className="text-sm text-gray-700">
                              {vuln.Title}
                            </p>
                            {vuln.References && vuln.References.length > 0 && (
                              <div className="mt-2">
                                <h5 className="text-sm font-medium">
                                  References:
                                </h5>
                                <ul className="text-xs text-blue-600 space-y-1 mt-1 max-h-24 overflow-y-auto">
                                  {vuln.References.slice(0, 3).map(
                                    (ref: string, i: number) => (
                                      <li key={i}>
                                        <a
                                          href={ref}
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          className="hover:underline"
                                        >
                                          {ref.length > 60
                                            ? ref.substring(0, 60) + "..."
                                            : ref}
                                        </a>
                                      </li>
                                    )
                                  )}
                                  {vuln.References.length > 3 && (
                                    <li className="text-gray-500">
                                      And {vuln.References.length - 3} more
                                      references...
                                    </li>
                                  )}
                                </ul>
                              </div>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    )}
                  </React.Fragment>
                ))}
              </TableBody>
            </Table>
          </div>
        </TabsContent>
      ))}
    </Tabs>
  );
}
